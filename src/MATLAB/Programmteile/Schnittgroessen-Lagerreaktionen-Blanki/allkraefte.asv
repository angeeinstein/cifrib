function [B1, B2] = akg(l)

global main;
syms B1 B2

% Summe aller kr√§fte
    SF = 0;

    % go throu all external Forces
        % all Force Forces
        [~,F1] = main.Force;
        for i=1:F1
            SF = SF + main.Force(1,i) * sin(main.Force(3,i));
        end
        
        % all Line lods
            [~,D1] = main.Distl;
            for i=1:D1
                switch main.Distl(5,i)
                    % rectangular Distl
                    case 0
                        SF = SF + (main.Distl(2,i)-main.Distl(1,i)) * main.Distl(6,i);
                    % Rectangular load
                    case 1
                        SF = SF + 1/sqrt(2) * mian.Distl(6,i);
                    % Quadratic load
                    case 2
                        SF = SF + 1/sqrt(3) * mian.Distl(6,i);
                end
            end
    % Add Bearing forces 
    SF = SF + B1 + B2;

% Summe aller Momente
    SM = 0;

    % go thrue all external Moments
        % all Moments 
            % all Force Forces
            for i=1:F1
                SM = SM + main.Force(1,i) * sin(main.Force(3,i)) * (main.Force(1,i));
            end

            % Line loads
            for i=1:D1
                switch main.Distl(5,i)
                    % rectangular Distl
                    case 0
                        SM = SM + (main.Distl(2,i)-main.Distl(1,i)) * main.Distl(6,i) * [(main.Distl(2,i)-main.Distl(1,i))/2+main.Distl(1,i)];
                    % Rectangular load
                    case 1
                        SM = SM + 1/sqrt(2) * mian.Distl(6,i)* [2/3 * (main.Distl(2,i)-main.Distl(1,i))+main.Distl(1,i)];
                    % Quadratic load
                    case 2
                        SM = SM + 1/sqrt(3) * mian.Distl(6,i)* [main.Distl(1)+9/16*(main.Distl(2,i)-main.Distl(1,i));
                end
            end
